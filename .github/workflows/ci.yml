name: CI

on:
  push:
  pull_request:

jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache-dependency-path: 'package-lock.json'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint -- --max-warnings=0

  build:
    name: "Build"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache-dependency-path: 'package-lock.json'
      - name: Install dependencies
        run: npm ci
      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_THIRDWEB_CLIENT_ID=${{ secrets.THIRDWEB_CLIENT_ID }}" >> .env
          echo "NEXT_PUBLIC_LTAI_SUBSCRIPTIONS_API_URL=${{ secrets.LTAI_SUBSCRIPTIONS_API_URL }}" >> .env
          echo "NEXT_PUBLIC_LTAI_AGENTS_API_URL=${{ secrets.LTAI_AGENTS_API_URL }}" >> .env
          echo "NEXT_PUBLIC_LTAI_AUTH_API_URL=${{ secrets.LTAI_AUTH_API_URL }}" >> .env
          echo "NEXT_PUBLIC_SOLANA_RPC=${{ secrets.SOLANA_RPC }}" >> .env
      - name: Build project
        run: npm run build

      - name: Deploy preview on Aleph
        if: ${{ github.event_name == 'pull_request' }}
        uses: aleph-im/web3-hosting-action@v0.1.1
        with:
          path: 'out'
