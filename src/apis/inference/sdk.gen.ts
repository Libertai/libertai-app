// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { GetAuthMessageAuthMessagePostData, GetAuthMessageAuthMessagePostResponse, GetAuthMessageAuthMessagePostError, LoginWithWalletAuthLoginPostData, LoginWithWalletAuthLoginPostResponse, LoginWithWalletAuthLoginPostError, ProcessLtaiTransactionsCreditsLtaiProcessPostData, ProcessLtaiTransactionsCreditsLtaiProcessPostResponse, ThirdwebWebhookCreditsThirdwebWebhookPostData, ThirdwebWebhookCreditsThirdwebWebhookPostError, UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostData, UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostResponse, GetApiKeysApiKeysAddressGetData, GetApiKeysApiKeysAddressGetResponse, GetApiKeysApiKeysAddressGetError, CreateApiKeyApiKeysAddressPostData, CreateApiKeyApiKeysAddressPostResponse, CreateApiKeyApiKeysAddressPostError, DeleteApiKeyApiKeysIdKeyIdDeleteData, DeleteApiKeyApiKeysIdKeyIdDeleteError, UpdateApiKeyApiKeysIdKeyIdPutData, UpdateApiKeyApiKeysIdKeyIdPutResponse, UpdateApiKeyApiKeysIdKeyIdPutError, LogApiKeyUsageApiKeysUsagePostData, LogApiKeyUsageApiKeysUsagePostError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Auth Message
 * Get the static message for wallet signature authentication.
 */
export const getAuthMessageAuthMessagePost = <ThrowOnError extends boolean = false>(options: Options<GetAuthMessageAuthMessagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetAuthMessageAuthMessagePostResponse, GetAuthMessageAuthMessagePostError, ThrowOnError>({
        url: '/auth/message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login With Wallet
 * Authenticate with a wallet signature.
 */
export const loginWithWalletAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginWithWalletAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginWithWalletAuthLoginPostResponse, LoginWithWalletAuthLoginPostError, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Process Ltai Transactions
 * Process credit purchase with $LTAI transactions
 */
export const processLtaiTransactionsCreditsLtaiProcessPost = <ThrowOnError extends boolean = false>(options?: Options<ProcessLtaiTransactionsCreditsLtaiProcessPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProcessLtaiTransactionsCreditsLtaiProcessPostResponse, unknown, ThrowOnError>({
        url: '/credits/ltai/process',
        ...options
    });
};

/**
 * Thirdweb Webhook
 * Receive webhooks from Thirdweb
 */
export const thirdwebWebhookCreditsThirdwebWebhookPost = <ThrowOnError extends boolean = false>(options: Options<ThirdwebWebhookCreditsThirdwebWebhookPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ThirdwebWebhookCreditsThirdwebWebhookPostError, ThrowOnError>({
        url: '/credits/thirdweb/webhook',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update Expired Credit Transactions
 * Deactivate credits with a past expiration date.
 */
export const updateExpiredCreditTransactionsCreditsUpdateExpiredPost = <ThrowOnError extends boolean = false>(options?: Options<UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UpdateExpiredCreditTransactionsCreditsUpdateExpiredPostResponse, unknown, ThrowOnError>({
        url: '/credits/update-expired',
        ...options
    });
};

/**
 * Get Api Keys
 * Get all API keys for a user.
 */
export const getApiKeysApiKeysAddressGet = <ThrowOnError extends boolean = false>(options: Options<GetApiKeysApiKeysAddressGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiKeysApiKeysAddressGetResponse, GetApiKeysApiKeysAddressGetError, ThrowOnError>({
        url: '/api-keys/{address}',
        ...options
    });
};

/**
 * Create Api Key
 * Create a new API key for a user.
 */
export const createApiKeyApiKeysAddressPost = <ThrowOnError extends boolean = false>(options: Options<CreateApiKeyApiKeysAddressPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateApiKeyApiKeysAddressPostResponse, CreateApiKeyApiKeysAddressPostError, ThrowOnError>({
        url: '/api-keys/{address}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Api Key
 * Delete an API key.
 */
export const deleteApiKeyApiKeysIdKeyIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteApiKeyApiKeysIdKeyIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteApiKeyApiKeysIdKeyIdDeleteError, ThrowOnError>({
        url: '/api-keys/id/{key_id}',
        ...options
    });
};

/**
 * Update Api Key
 * Update an API key.
 */
export const updateApiKeyApiKeysIdKeyIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateApiKeyApiKeysIdKeyIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateApiKeyApiKeysIdKeyIdPutResponse, UpdateApiKeyApiKeysIdKeyIdPutError, ThrowOnError>({
        url: '/api-keys/id/{key_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Log Api Key Usage
 * Log API key usage.
 */
export const logApiKeyUsageApiKeysUsagePost = <ThrowOnError extends boolean = false>(options: Options<LogApiKeyUsageApiKeysUsagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, LogApiKeyUsageApiKeysUsagePostError, ThrowOnError>({
        url: '/api-keys/usage',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};